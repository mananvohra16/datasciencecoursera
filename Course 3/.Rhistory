rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
head(rankall("heart attack", 20), 10)
best("SC", "heart attack")
best("SC", "heart attack")
best("SC", "heart attack")
best <- function(state, outcome){
outcomes = c("heart attack", "heart failure", "pneumonia")
## Check if outcome is one of the strings in outcomes
if( outcome %in% outcomes == FALSE ) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) {
stop("invalid state")
}
## Check that state and outcome are valid
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death
## rate
data[rowNum, ]$name
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack",
```{r}
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
library(swirl)
swirl()
exit()
exit
exit()
clar
clear
swril()
install_course("Getting_and_Cleaning_Data")
library(swirl)
install_course("Getting_and_Cleaning_Data")
swirl()
eixT)_
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydt")
rm("mydf")
cran
!group_by()
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarise(cran, mean)size
summarise(cran, mean(size))
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_ counts <- filter(pack_sum, chunt > 679)
top_counts <- filter(pack_sum, chunt > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique<- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique)
)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()\
submit()
exit()
library(dplyr)
install_course("Getting_and_Cleaning_Data")
library(swirl)
install_course("Getting_and_Cleaning_Data")
swirl()
swirl()
library(tidyr)
students
?gather
gather(students, sex. count, -grade)
gather(students, sex, count, -grade)
students2
gether(students2, sex_classs, -grade)
gather(students2, sex_classs, -grade)
gather(students2, male_1, female_1, male_2, female_2, sex_class, -grade)
gather(students2, sex_class, count -grade)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, sex_class, into= c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
;ibrary(readr)
library(readr)
parse_number("class5")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
parse_number("class5")
submit()
submit()
submit()
submit()
?mutate
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passes <- passed %>% mutate(passed, status = "passed")
passes <- passed %>% mutate( status = "passed")
passed <- passed %>% mutate( status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
stat
sat
?separate
submit()
submit()
getwd()
cd Documents
setwd("~/Documents/GitHub/datasciencecoursera/Course 3")
getwd()
download.file(url)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url)
download.file(url, file.path("dataFiles.zip"))
library(data.table)
library(data.table)
library(dplyr)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path("dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
activityLabels <- fread("data/activity_labels.txt")
activityLabels <- fread("data/activity_labels.txt", col.names = c("classLabels", "activityName"))
View(activityLabels)
View(activityLabels)
activityLabels <- fread("data/activity_labels.txt", col.names = c("classLabels", "activityName"))
features <- fread("data/features.txt", col.names = c("indes", "featureName"))
View(features)
View(features)
View(features)
View(features)
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
View(activityLabels)
View(activityLabels)
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
activityLabels <- fread("data/activity_labels.txt", col.names = c("classLabels", "activityName"))
features <- fread("data/features.txt", col.names = c("indes", "featureName"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
features <- fread("data/features.txt", col.names = c("indes", "featureName"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
measurements <- features[featuresWanted, featureName]
measurements <- gsub('[()]', '', measurements)
train <- fread("data/train/X_train.txt")[, featuresWanted, with= FALSE]
View(r)
View(train)
train1 <- fread("data/train/X_train.txt")
View(train1)
View(train)
## Features with 1 category
data$featJerk <- factor(grepthis("Jerk"), labels=c(NA, "Jerk"))
library(dplyr)
library(dplyr)
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path("dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
#loading subject and Activity
dtSubjectTrain <- fread("UCI HAR Dataset/train/subject_train.txt")
dtSubjectTest  <- fread("UCI HAR Dataset/test/subject_test.txt")
dtActivityTrain <- fread("UCI HAR Dataset/train/y_train.txt")
dtActivityTest  <- fread("UCI HAR Dataset/test/y_test.txt")
dtTrain <- fread("UCI HAR Dataset/train/X_train.txt")
dtTest <- fread("UCI HAR Dataset/test/X_test.txt")
dtFeature <- fread("UCI HAR Dataset/features.txt")
setnames(dtFeature, c("featureNum", "featureName"))
#merging training and testing data
dtSubject <- rbind(dtSubjectTrain, dtSubjectTest)
setnames(dtSubject, "subject")
dtActivity <- rbind(dtActivityTrain, dtActivityTest)
setnames(dtActivity, "activityNum")
dtTrainTest <- rbind(dtTrain, dtTest)
#merging columns
dtSub <- cbind(dtSubject, dtActivity)
data <- cbind(dtSub, dtTrainTest)
setkey(data, "subject", "activityNum")
# Extracting features with only Mean and Standard Deviation
dtFeatures <- dtFeature[grepl("(mean|std)\\(\\)", featureName)]
dtFeatures$featureCode <- dtFeatures[, paste0("V", featureNum)]
head(dtFeatures)
dtFeatures$featureCode
data <- data[, c(key(data), dtFeatures$featureCode), with=FALSE]
#adding names to activity
dtActivityNames <- fread("UCI HAR Dataset/activity_labels.txt")
setnames(dtActivityNames, names(dtActivityNames), c("activityNum", "activityName"))
data <- merge(data, dtActivityNames, by="activityNum", all.x=TRUE)
setkey(data, subject, activityNum, activityName)
data <- data.table(melt(data, key(data), variable.name="featureCode"))
data <- merge(data, dtFeatures[, list(featureNum, featureCode, featureName)], by="featureCode", all.x=TRUE)
data$activity <- factor(data$activityName)
data$feature <- factor(data$featureName)
grepthis <- function (regex) {
grepl(regex, data$feature)
}
## Features with 2 categories
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("^t"), grepthis("^f")), ncol=nrow(y))
data$featDomain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepthis("Acc"), grepthis("Gyro")), ncol=nrow(y))
data$featInstrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepthis("BodyAcc"), grepthis("GravityAcc")), ncol=nrow(y))
data$featAcceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepthis("mean()"), grepthis("std()")), ncol=nrow(y))
data$featVariable <- factor(x %*% y, labels=c("Mean", "SD"))
## Features with 1 category
data$featJerk <- factor(grepthis("Jerk"), labels=c(NA, "Jerk"))
data$featMagnitude <- factor(grepthis("Mag"), labels=c(NA, "Magnitude"))
## Features with 3 categories
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("-X"), grepthis("-Y"), grepthis("-Z")), ncol=nrow(y))
data$featAxis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
setkey(data, subject, activity, featDomain, featAcceleration, featInstrument, featJerk, featMagnitude, featVariable, featAxis)
dtTidy <- data[, list(count = .N, average = mean(value)), by=key(data)]
write.table(dtTidy, file="tidy_data.txt", row.names = FALSE)
View(dtTidy)
View(dtTidy)
library(dplyr)
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path("dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
#loading subject and Activity
dtSubjectTrain <- fread("UCI HAR Dataset/train/subject_train.txt")
dtSubjectTest  <- fread("UCI HAR Dataset/test/subject_test.txt")
dtActivityTrain <- fread("UCI HAR Dataset/train/y_train.txt")
dtActivityTest  <- fread("UCI HAR Dataset/test/y_test.txt")
dtTrain <- fread("UCI HAR Dataset/train/X_train.txt")
dtTest <- fread("UCI HAR Dataset/test/X_test.txt")
dtFeature <- fread("UCI HAR Dataset/features.txt")
setnames(dtFeature, c("featureNum", "featureName"))
#merging training and testing data
dtSubject <- rbind(dtSubjectTrain, dtSubjectTest)
setnames(dtSubject, "subject")
dtActivity <- rbind(dtActivityTrain, dtActivityTest)
setnames(dtActivity, "activityNum")
dtTrainTest <- rbind(dtTrain, dtTest)
#merging columns
dtSub <- cbind(dtSubject, dtActivity)
data <- cbind(dtSub, dtTrainTest)
setkey(data, "subject", "activityNum")
# Extracting features with only Mean and Standard Deviation
dtFeatures <- dtFeature[grepl("(mean|std)\\(\\)", featureName)]
dtFeatures$featureCode <- dtFeatures[, paste0("V", featureNum)]
head(dtFeatures)
dtFeatures$featureCode
data <- data[, c(key(data), dtFeatures$featureCode), with=FALSE]
#adding names to activity
dtActivityNames <- fread("UCI HAR Dataset/activity_labels.txt")
setnames(dtActivityNames, names(dtActivityNames), c("activityNum", "activityName"))
data <- merge(data, dtActivityNames, by="activityNum", all.x=TRUE)
setkey(data, subject, activityNum, activityName)
data <- data.table(melt(data, key(data), variable.name="featureCode"))
data <- merge(data, dtFeatures[, list(featureNum, featureCode, featureName)], by="featureCode", all.x=TRUE)
data$activity <- factor(data$activityName)
data$feature <- factor(data$featureName)
grepthis <- function (regex) {
grepl(regex, data$feature)
}
## Features with 2 categories
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("^t"), grepthis("^f")), ncol=nrow(y))
data$featDomain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepthis("Acc"), grepthis("Gyro")), ncol=nrow(y))
data$featInstrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepthis("BodyAcc"), grepthis("GravityAcc")), ncol=nrow(y))
data$featAcceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepthis("mean()"), grepthis("std()")), ncol=nrow(y))
data$featVariable <- factor(x %*% y, labels=c("Mean", "SD"))
## Features with 1 category
data$featJerk <- factor(grepthis("Jerk"), labels=c(NA, "Jerk"))
data$featMagnitude <- factor(grepthis("Mag"), labels=c(NA, "Magnitude"))
## Features with 3 categories
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("-X"), grepthis("-Y"), grepthis("-Z")), ncol=nrow(y))
data$featAxis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
setkey(data, subject, activity, featDomain, featAcceleration, featInstrument, featJerk, featMagnitude, featVariable, featAxis)
dtTidy <- data[, list(count = .N, average = mean(value)), by=key(data)]
write.table(dtTidy, file="tidy_data1.txt", row.names = FALSE)
View(dtTidy)
View(dtTidy)
dtTidy
summarise(dtTidy)
summarize(dtTidy)
summarise(dtTidy)
str(dtTidy)
library(dplyr)
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path("dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
#loading subject and Activity
dtSubjectTrain <- fread("UCI HAR Dataset/train/subject_train.txt")
dtSubjectTest  <- fread("UCI HAR Dataset/test/subject_test.txt")
dtActivityTrain <- fread("UCI HAR Dataset/train/y_train.txt")
dtActivityTest  <- fread("UCI HAR Dataset/test/y_test.txt")
dtTrain <- fread("UCI HAR Dataset/train/X_train.txt")
dtTest <- fread("UCI HAR Dataset/test/X_test.txt")
dtFeature <- fread("UCI HAR Dataset/features.txt")
setnames(dtFeature, c("featureNum", "featureName"))
#merging training and testing data
dtSubject <- rbind(dtSubjectTrain, dtSubjectTest)
setnames(dtSubject, "subject")
dtActivity <- rbind(dtActivityTrain, dtActivityTest)
setnames(dtActivity, "activityNum")
dtTrainTest <- rbind(dtTrain, dtTest)
#merging columns
dtSub <- cbind(dtSubject, dtActivity)
data <- cbind(dtSub, dtTrainTest)
setkey(data, "subject", "activityNum")
# Extracting features with only Mean and Standard Deviation
dtFeatures <- dtFeature[grepl("(mean|std)\\(\\)", featureName)]
dtFeatures$featureCode <- dtFeatures[, paste0("V", featureNum)]
head(dtFeatures)
dtFeatures$featureCode
data <- data[, c(key(data), dtFeatures$featureCode), with=FALSE]
#adding names to activity
dtActivityNames <- fread("UCI HAR Dataset/activity_labels.txt")
setnames(dtActivityNames, names(dtActivityNames), c("activityNum", "activityName"))
data <- merge(data, dtActivityNames, by="activityNum", all.x=TRUE)
setkey(data, subject, activityNum, activityName)
data <- data.table(melt(data, key(data), variable.name="featureCode"))
data <- merge(data, dtFeatures[, list(featureNum, featureCode, featureName)], by="featureCode", all.x=TRUE)
data$activity <- factor(data$activityName)
data$feature <- factor(data$featureName)
grepthis <- function (regex) {
grepl(regex, data$feature)
}
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("^t"), grepthis("^f")), ncol=nrow(y))
data$Domain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepthis("Acc"), grepthis("Gyro")), ncol=nrow(y))
data$Instrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepthis("BodyAcc"), grepthis("GravityAcc")), ncol=nrow(y))
data$Acceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepthis("mean()"), grepthis("std()")), ncol=nrow(y))
data$Variable <- factor(x %*% y, labels=c("Mean", "SD"))
data$Jerk <- factor(grepthis("Jerk"), labels=c(NA, "Jerk"))
data$Magnitude <- factor(grepthis("Mag"), labels=c(NA, "Magnitude"))
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepthis("-X"), grepthis("-Y"), grepthis("-Z")), ncol=nrow(y))
data$Axis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
setkey(data, subject, activity, Domain, Acceleration, Instrument, Jerk, Magnitude, Variable, Axis)
dtTidy <- data[, list(count = .N, average = mean(value)), by=key(data)]
write.table(dtTidy, file="tidy_data1.txt", row.names = FALSE)
View(dtTidy)
View(dtTidy)
